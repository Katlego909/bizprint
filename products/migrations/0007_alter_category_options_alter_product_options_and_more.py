# Generated by Django 5.2 on 2025-09-03 07:51

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("products", "0006_alter_category_options"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="category",
            options={
                "ordering": ["name"],
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.AlterModelOptions(
            name="product",
            options={"ordering": ["name"]},
        ),
        migrations.AlterField(
            model_name="optionalservice",
            name="is_required",
            field=models.BooleanField(
                default=False, help_text="If true, auto-included in orders"
            ),
        ),
        migrations.AlterField(
            model_name="optionalservice",
            name="label",
            field=models.CharField(
                help_text='e.g. "3-Day Design Service"', max_length=100
            ),
        ),
        migrations.AlterField(
            model_name="order",
            name="uuid",
            field=models.UUIDField(
                blank=True, db_index=True, default=uuid.uuid4, editable=False, null=True
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="category",
            field=models.ForeignKey(
                blank=True,
                help_text="Optional: leave blank for uncategorized",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="products",
                to="products.category",
            ),
        ),
        migrations.AlterField(
            model_name="quantitytier",
            name="base_price",
            field=models.DecimalField(
                decimal_places=2, help_text="Price for this tier", max_digits=8
            ),
        ),
        migrations.AlterField(
            model_name="quantitytier",
            name="quantity",
            field=models.PositiveIntegerField(
                help_text="Units in this tier, e.g. 100, 500"
            ),
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(fields=["slug"], name="products_ca_slug_da4386_idx"),
        ),
        migrations.AddIndex(
            model_name="optionalservice",
            index=models.Index(
                fields=["product"], name="products_op_product_215a16_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["user", "created_at"], name="products_or_user_id_ab51dd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["status", "created_at"], name="products_or_status_4e53ae_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["payment_status", "created_at"],
                name="products_or_payment_7e5913_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["slug"], name="products_pr_slug_3edc0c_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["category"], name="products_pr_categor_9edb3d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productoption",
            index=models.Index(
                fields=["product", "option_type"], name="products_pr_product_23b67e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="quantitytier",
            index=models.Index(
                fields=["product", "quantity"], name="products_qu_product_9985e0_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="optionalservice",
            constraint=models.UniqueConstraint(
                fields=("product", "label"), name="uq_service_product_label"
            ),
        ),
        migrations.AddConstraint(
            model_name="optionalservice",
            constraint=models.CheckConstraint(
                condition=models.Q(("price__gte", 0)), name="ck_service_price_gte_0"
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                condition=models.Q(("quantity__gt", 0)), name="ck_order_qty_gt_0"
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                condition=models.Q(("base_price__gte", 0)),
                name="ck_order_base_price_gte_0",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                condition=models.Q(("shipping_price__gte", 0)),
                name="ck_order_shipping_gte_0",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                condition=models.Q(("total_price__gte", 0)), name="ck_order_total_gte_0"
            ),
        ),
        migrations.AddConstraint(
            model_name="productoption",
            constraint=models.UniqueConstraint(
                fields=("product", "option_type", "value"),
                name="uq_option_product_type_value",
            ),
        ),
        migrations.AddConstraint(
            model_name="productoption",
            constraint=models.CheckConstraint(
                condition=models.Q(("price_modifier__gte", 0)),
                name="ck_option_price_mod_gte_0",
            ),
        ),
        migrations.AddConstraint(
            model_name="quantitytier",
            constraint=models.UniqueConstraint(
                fields=("product", "quantity"), name="uq_tier_product_quantity"
            ),
        ),
        migrations.AddConstraint(
            model_name="quantitytier",
            constraint=models.CheckConstraint(
                condition=models.Q(("quantity__gt", 0)), name="ck_tier_quantity_gt_0"
            ),
        ),
        migrations.AddConstraint(
            model_name="quantitytier",
            constraint=models.CheckConstraint(
                condition=models.Q(("base_price__gte", 0)), name="ck_tier_price_gte_0"
            ),
        ),
    ]
